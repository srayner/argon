// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

enum PropertyType {
  STRING
  NUMERIC
  METRIC
  IMPERIAL
}

enum UnitPosition {
  PREFIX
  SUFFIX
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String         @unique @db.VarChar(128)
  emailVerified DateTime?
  image         String?
  password      String         @db.VarChar(60)
  role          UserRole       @default(USER)
  accounts      Account[]

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Category {
  id            String         @id @default(cuid())
  code          String?        @unique @db.VarChar(20)
  name          String?        @unique @db.VarChar(40)
  status        ActiveStatus?  @default(ACTIVE)
  parentId      String?
  parent        Category?      @relation("ParentChild", fields: [parentId], references: [id])
  children      Category[]     @relation("ParentChild")
  depth         Int?
  fullPath      String?        @db.VarChar(341)
  products      Product[]
  properties    Property[]
  image         Image?        @relation(fields: [imageId], references: [id])
  imageId       Int?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([parentId])
}

model Image {
  id           Int            @id @default(autoincrement())
  href         String         @db.VarChar(255)
  name         String         @db.VarChar(128)
  category     Category[]
  product      Product[]
  supplier     Supplier[]
  manufacturer Manufacturer[]

  createdAt DateTime @default(now())
}

model Product {
  id                 Int           @id @default(autoincrement())
  name               String        @db.VarChar(128)
  category           Category?     @relation(fields: [categoryId], references: [id])
  categoryId         String?
  manufacturer       Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId     Int?
  manufacturerPartNo String?       @db.VarChar(64)
  supplier           Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId         Int?
  supplierPartNo     String?       @db.VarChar(64)
  cost               Float?
  qtyInStock         Int
  location           String?       @db.VarChar(64)
  image              Image?        @relation(fields: [imageId], references: [id])
  imageId            Int?
  propertyValues     PropertyValue[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Property {
  id                 String        @id @default(cuid())
  name               String
  type               PropertyType
  units              String?
  unitPosition       UnitPosition  @default(SUFFIX)
  categoryId         String
  category           Category      @relation(fields: [categoryId], references: [id])
  propertyValues     PropertyValue[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
}

model PropertyValue {
  id                 String        @id @default(cuid())
  valueString        String?
  valueNumeric       Float?
  productId          Int
  product            Product       @relation(fields: [productId], references: [id])
  propertyId         String
  property           Property      @relation(fields: [propertyId], references: [id])

  @@unique([productId, propertyId])
}

model Manufacturer {
  id                 Int           @id @default(autoincrement())
  name               String        @db.VarChar(128)
  image              Image?        @relation(fields: [imageId], references: [id])
  imageId            Int?
  Product            Product[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Supplier {
  id                 Int           @id @default(autoincrement())
  name               String        @db.VarChar(128)
  image              Image?        @relation(fields: [imageId], references: [id])
  imageId            Int?
  Product            Product[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}
